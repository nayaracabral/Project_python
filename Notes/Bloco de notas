import tkinter as tk

from tkinter import filedialog, simpledialog, colorchooser

from tkinter import font

 

class Notepad:

    def __init__(self, root):

        self.root = root

        self.text_area = tk.Text(self.root)

        self.text_area.pack(fill=tk.BOTH, expand=1)

 

        # Adicionando a lista de tarefas

        self.task_list = tk.Listbox(self.root)

        self.task_list.pack(fill=tk.BOTH, expand=1)

 

    def new_file(self):

        self.text_area.delete(1.0, tk.END)

 #abrir

    def open_file(self):

        file_path = filedialog.askopenfilename()

        with open(file_path, 'r') as f:

            content = f.read()

        self.text_area.delete(1.0, tk.END)

        self.text_area.insert(tk.INSERT, content)

 

    def save_file(self):

        file_path = filedialog.asksaveasfilename()

        with open(file_path, 'w') as f:

            content = self.text_area.get(1.0, tk.END)

            f.write(content)

 # Opção mudar fonte

    def change_font(self):

        current_font = font.Font(font=self.text_area['font'])

        font_family = current_font.actual()['family']

        font_size = current_font.actual()['size']

        new_font = simpledialog.askstring('Font', 'Enter font name:', initialvalue=font_family)

        if new_font:

            self.text_area.configure(font=(new_font, font_size))

 #mudar tamanho da fonte

    def change_font_size(self):

        current_font = font.Font(font=self.text_area['font'])

        font_size = current_font.actual()['size']

        new_size = simpledialog.askinteger('Font Size', 'Enter font size:', initialvalue=font_size)

        if new_size:

            self.text_area.configure(font=(current_font.actual()['family'], new_size))

 #mudar cor da fonte, funcional apenas para o bloco de notas e não para as task

    def change_text_color(self):

        color_code = colorchooser.askcolor(title ="Choose color")

        self.text_area.configure(fg=color_code[1])

 

    # Adicionando funções CRUD em  tarefas

    def add_task(self):

        task = simpledialog.askstring('New task', 'Enter task:')

        if task:

            self.task_list.insert(tk.END, task)

 

    def edit_task(self):

        selected_task_index = self.task_list.curselection()

        if selected_task_index:

            selected_task = self.task_list.get(selected_task_index)

            new_task = simpledialog.askstring('Edit task', 'Enter new task:', initialvalue=selected_task)

            if new_task:

                self.task_list.delete(selected_task_index)

                self.task_list.insert(selected_task_index, new_task)

 

    def delete_task(self):

        selected_task_index = self.task_list.curselection()

        if selected_task_index:

            self.task_list.delete(selected_task_index)

 

root = tk.Tk()

notepad = Notepad(root)

 

menu = tk.Menu(root)

root.config(menu=menu)

 
# menu configurado

file_menu = tk.Menu(menu)

menu.add_cascade(label="File", menu=file_menu)

file_menu.add_command(label="New", command=notepad.new_file)

file_menu.add_command(label="Open...", command=notepad.open_file)

file_menu.add_command(label="Save As...", command=notepad.save_file)

 

edit_menu = tk.Menu(menu)

menu.add_cascade(label="Edit", menu=edit_menu)

edit_menu.add_command(label="Change Font", command=notepad.change_font)

edit_menu.add_command(label="Change Font Size", command=notepad.change_font_size)

edit_menu.add_command(label="Change Text Color", command=notepad.change_text_color)

 

task_menu = tk.Menu(menu)

menu.add_cascade(label="Tasks", menu=task_menu)

task_menu.add_command(label="Add Task", command=notepad.add_task)

task_menu.add_command(label="Edit Task", command=notepad.edit_task)

task_menu.add_command(label="Delete Task", command=notepad.delete_task)

 

root.mainloop()

